// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebServer.Data;

#nullable disable

namespace daily_regex.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250824092011_Challenges")]
    partial class Challenges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WebServer.Models.Auth.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("longtext");

                    b.Property<string>("IPAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("WebServer.Models.Auth.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AdminAccess"
                        },
                        new
                        {
                            Id = 2,
                            Name = "UserAccess"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PlayChallenge"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ViewHistory"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ViewLeaderboard"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CreateChallenge"
                        },
                        new
                        {
                            Id = 7,
                            Name = "EditChallenge"
                        },
                        new
                        {
                            Id = 8,
                            Name = "DeleteChallenge"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ViewFutureChallenges"
                        });
                });

            modelBuilder.Entity("WebServer.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Description = "Administrator role with full access",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Description = "Regular user that can play daily challenges",
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Description = "Moderator that can create/edit challenges but not full admin",
                            Name = "Moderator"
                        });
                });

            modelBuilder.Entity("WebServer.Models.Auth.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 11,
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 12,
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 13,
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 14,
                            PermissionId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 15,
                            PermissionId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 16,
                            PermissionId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 17,
                            PermissionId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 18,
                            PermissionId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 19,
                            PermissionId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 20,
                            PermissionId = 9,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("WebServer.Models.Auth.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebServer.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProfilePicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProfilePicLink")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebServer.Models.Auth.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WebServer.Models.Challenges.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("516995f7-5f70-4dd8-a4cc-ac4e638192e8"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7356),
                            Description = "Encuentra un email válido (ejemplo: user@example.com).",
                            Solution = "^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$",
                            Title = "Validar Email",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7700)
                        },
                        new
                        {
                            Id = new Guid("dac555e9-1f4d-45b5-b28f-6e938bed32bf"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7966),
                            Description = "Encuentra todos los números enteros en el texto (ej: 42, -7, 1234).",
                            Solution = "-?\\d+",
                            Title = "Detectar enteros",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7966)
                        },
                        new
                        {
                            Id = new Guid("e9957ea7-209e-493c-95d9-2c5f655681ec"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7968),
                            Description = "Valida un código postal de 5 dígitos (ej: 28013).",
                            Solution = "^\\d{5}$",
                            Title = "Código Postal",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7968)
                        },
                        new
                        {
                            Id = new Guid("33acd1ff-9920-4d74-9db5-b10d89df0ef1"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7983),
                            Description = "Encuentra todos los hashtags en un texto (ej: #regex #coding).",
                            Solution = "#\\w+",
                            Title = "Encuentra Hashtags",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7984)
                        },
                        new
                        {
                            Id = new Guid("0a5e2320-0fcb-4ff6-8589-47b6882c134f"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7986),
                            Description = "Valida una fecha en formato dd/mm/yyyy (ej: 23/08/2025).",
                            Solution = "^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/\\d{4}$",
                            Title = "Fechas",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7986)
                        },
                        new
                        {
                            Id = new Guid("51c48f76-b168-45d1-a954-f5892030d5f8"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7988),
                            Description = "Encuentra palabras que comiencen con vocal (ej: 'apple', 'orange').",
                            Solution = "\\b[aeiouAEIOU]\\w*",
                            Title = "Palabras con vocal",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7988)
                        },
                        new
                        {
                            Id = new Guid("3d40cfc5-4bca-4314-8d4d-826e04da28d2"),
                            CreatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7990),
                            Description = "Valida una URL que empiece con http o https.",
                            Solution = "^https?:\\/\\/[^\\s/$.?#].[^\\s]*$",
                            Title = "Validar URL",
                            UpdatedAt = new DateTime(2025, 8, 24, 9, 20, 10, 697, DateTimeKind.Utc).AddTicks(7990)
                        });
                });

            modelBuilder.Entity("WebServer.Models.Challenges.ChallengeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeSchedules");
                });

            modelBuilder.Entity("WebServer.Models.UserAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RegexSubmitted")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("UserAttempts");
                });

            modelBuilder.Entity("WebServer.Models.Auth.Permission", b =>
                {
                    b.HasOne("WebServer.Models.Auth.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("WebServer.Models.Auth.RolePermission", b =>
                {
                    b.HasOne("WebServer.Models.Auth.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebServer.Models.Auth.Session", b =>
                {
                    b.HasOne("WebServer.Models.Auth.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("WebServer.Models.Auth.UserRole", b =>
                {
                    b.HasOne("WebServer.Models.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebServer.Models.Challenges.Challenge", b =>
                {
                    b.HasOne("WebServer.Models.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("WebServer.Models.Challenges.ChallengeSchedule", b =>
                {
                    b.HasOne("WebServer.Models.Challenges.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("WebServer.Models.Auth.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebServer.Models.Auth.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
